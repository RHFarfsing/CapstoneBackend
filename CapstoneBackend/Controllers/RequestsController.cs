using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using CapstoneBackend.Data;
using CapstoneBackend.Models;

namespace CapstoneBackend.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RequestsController : ControllerBase {
        #region autoGeneratedMethods
        private readonly CapstoneDbContext _context;

        public RequestsController(CapstoneDbContext context) {
            _context = context;
        }

        // GET: api/Requests
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Request>>> GetRequest() {
            return await _context.Request.ToListAsync();
        }

        // GET: api/Requests/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Request>> GetRequest(int id) {
            var request = await _context.Request.FindAsync(id);

            if (request == null) {
                return NotFound();
            }

            return request;
        }

        // PUT: api/Requests/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for
        // more details see https://aka.ms/RazorPagesCRUD.
        [HttpPut("{id}")]
        public async Task<IActionResult> PutRequest(int id, Request request) {
            if (id != request.Id) {
                return BadRequest();
            }

            _context.Entry(request).State = EntityState.Modified;

            try {
                await _context.SaveChangesAsync();
            } catch (DbUpdateConcurrencyException) {
                if (!RequestExists(id)) {
                    return NotFound();
                } else {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Requests
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for
        // more details see https://aka.ms/RazorPagesCRUD.
        [HttpPost]
        public async Task<ActionResult<Request>> PostRequest(Request request) {
            _context.Request.Add(request);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetRequest", new { id = request.Id }, request);
        }

        // DELETE: api/Requests/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<Request>> DeleteRequest(int id) {
            var request = await _context.Request.FindAsync(id);
            if (request == null) {
                return NotFound();
            }

            _context.Request.Remove(request);
            await _context.SaveChangesAsync();

            return request;
        }

        private bool RequestExists(int id) {
            return _context.Request.Any(e => e.Id == id);
        }
        #endregion
        #region selfAddedMethods
        private readonly CapstoneDbContext context = new CapstoneDbContext();
        public const string StatusNew = "NEW";
        public const string StatusEdit = "EDIT";
        public const string StatusReview = "REVIEW";
        public const string StatusApproved = "APPROVED";
        public const string StatusRejected = "REJECTED";
        //[HttpGet("{userid}")]
        public IEnumerable<Request> GetRequestsToReviewNotOwn(int userId) {
            return context.Request.Where(x => x.UserId != userId && x.Status == StatusReview).ToList();
        }
        //[HttpPut("{id}/{status}")]
        public bool SetToReview(Request request) {
            if (request.Total <= 50) {
                request.Status = StatusApproved;
            } else {
                request.Status = StatusReview;
            }
            return UpdateRequest(request.Id, request);
        }
        //[HttpPut("{id}/{status}")]
        public bool SetToAppoved(Request request) {
            request.Status = StatusApproved;
            return UpdateRequest(request.Id, request);
        }
        //[HttpPut("{id}/{status}")]
        public bool SetToRejected(Request request) {
            request.Status = StatusRejected;
            return UpdateRequest(request.Id, request);
        }
        public bool UpdateRequest(int id, Request request) {
            if (request == null) throw new Exception("Request cannot be null in an update");
            if (id != request.Id) throw new Exception("Id and Request.Id must match");
            var rowsAffected = _context.SaveChanges();
            if (rowsAffected == 0) throw new Exception("Update failed.");
            return true;
        }
        #endregion
    }
}
